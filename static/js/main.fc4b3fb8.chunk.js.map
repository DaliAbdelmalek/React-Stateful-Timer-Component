{"version":3,"sources":["components/statfultimer.js","App.js","serviceWorker.js","index.js"],"names":["Statfultimer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timer","setTimeout","state","etat","secs","setState","mins","hrs","reset","react_default","a","createElement","className","style","zIndex","src","onClick","Component","App","components_statfultimer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAqFeA,qBAlFX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQVQ,MAAQ,WACJC,WAAW,WACiB,UAApBR,EAAKS,MAAMC,OACa,KAApBV,EAAKS,MAAME,KACXX,EAAKY,SAAS,CACVC,KAAMb,EAAKS,MAAMI,KAAO,EACxBF,KAAM,IAGVX,EAAKY,SAAS,CACVD,KAAMX,EAAKS,MAAME,KAAO,IAIR,KAApBX,EAAKS,MAAMI,MACXb,EAAKY,SAAS,CACVE,IAAKd,EAAKS,MAAMK,IAAM,EACtBD,KAAM,IAGdb,EAAKO,UAEV,MA/BYP,EAiCnBU,KAAO,WACqB,UAApBV,EAAKS,MAAMC,KACXV,EAAKY,SAAS,CACVF,KAAM,UAIVV,EAAKY,SAAS,CACVF,KAAM,UAEVV,EAAKO,UA3CMP,EA8CnBe,MAAQ,WACJf,EAAKY,SAAS,CACVE,IAAK,EACLD,KAAM,EACNF,KAAM,EACND,KAAM,UAjDVV,EAAKS,MAAQ,CACTK,IAAK,EACLD,KAAM,EACNF,KAAM,EACND,KAAM,QANKV,wEAuDf,OAEKgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEC,OAAQ,QAAUF,UAAU,SACtCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQG,IAAI,mGAE/BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAIf,KAAKM,MAAMK,IAAM,GAAK,IAAMX,KAAKM,MAAMK,IAAMX,KAAKM,MAAMK,IAA5D,KACAE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,QACAH,EAAAC,EAAAC,cAAA,UAAQK,QAASpB,KAAKO,MAA2B,UAApBP,KAAKM,MAAMC,KAAmB,OAAS,UAExEM,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAIf,KAAKM,MAAMI,KAAO,GAAK,IAAMV,KAAKM,MAAMI,KAAOV,KAAKM,MAAMI,KAA9D,KACAG,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,WAEJH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAIf,KAAKM,MAAME,KAAO,GAAK,IAAMR,KAAKM,MAAME,KAAOR,KAAKM,MAAME,MAC9DK,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,UACAH,EAAAC,EAAAC,cAAA,UAAQK,QAASpB,KAAKY,OAAtB,mBA3EMS,cCUVC,mLARX,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACQ,EAAD,cAJQF,aCUEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fc4b3fb8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './statfultimer.css'\r\nclass Statfultimer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hrs: 0,\r\n            mins: 0,\r\n            secs: 0,\r\n            etat: \"stop\"\r\n        }\r\n    }\r\n    timer = () => {\r\n        setTimeout(() => {\r\n            if (this.state.etat === \"start\") {\r\n                if (this.state.secs === 60) {\r\n                    this.setState({\r\n                        mins: this.state.mins + 1,\r\n                        secs: 0\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        secs: this.state.secs + 1\r\n                    })\r\n\r\n                }\r\n                if (this.state.mins === 60) {\r\n                    this.setState({\r\n                        hrs: this.state.hrs + 1,\r\n                        mins: 0\r\n                    })\r\n                }\r\n                this.timer()\r\n            }\r\n        }, 1000)\r\n    }\r\n    etat = () => {\r\n        if (this.state.etat === \"start\") {\r\n            this.setState({\r\n                etat: \"stop\"\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                etat: \"start\"\r\n            })\r\n            this.timer()\r\n        }\r\n    }\r\n    reset = () => {\r\n        this.setState({\r\n            hrs: 0,\r\n            mins: 0,\r\n            secs: 0,\r\n            etat: \"stop\"\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n\r\n             <div className='all'>\r\n             <div style={{ zIndex: '2222' }} className='image'>\r\n                 <img className='photo' src='https://financialtribune.com/sites/default/files/field/image/17january/11_mr_registry_170.png' />\r\n             </div>\r\n             <div className='time'>\r\n                 <div >\r\n                     <p>{this.state.hrs < 10 ? \"0\" + this.state.hrs : this.state.hrs}:</p>\r\n                     <p className='timer'>Hour</p>\r\n                     <button onClick={this.etat}>{this.state.etat === \"start\" ? \"Stop\" : \"Start\"}</button>\r\n                 </div>\r\n                 <div>\r\n                     <p>{this.state.mins < 10 ? \"0\" + this.state.mins : this.state.mins}:</p>\r\n                     <p className='timer'>Minute</p>\r\n                 </div>\r\n                 <div>\r\n                     <p>{this.state.secs < 10 ? \"0\" + this.state.secs : this.state.secs}</p>\r\n                     <p className='timer'>Second</p>\r\n                     <button onClick={this.reset}>Reset</button>\r\n                 </div>\r\n             </div>\r\n         </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Statfultimer;","import React, { Component } from 'react';\nimport Statfultimer from './components/statfultimer.js'\nclass App extends Component {\n    render() { \n      return ( \n        <div>\n          <Statfultimer/>\n        </div>\n      );\n    }\n  }\n   \n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}